import React, { useState, useEffect } from 'react';
import { Text, View, Button, StyleSheet, ActivityIndicator, Image, Linking, TouchableOpacity, Alert, TextInput, FlatList, ScrollView } from 'react-native';
import axios from 'axios';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useProductContext } from '../src/product_info/ProductContext';
import uuid from 'react-native-uuid'; // Import uuid

interface ProductInfo {
  id: string;
  title: string;
  brand: string;
  price: number;
  stock: string;
  images: string[];
  url: string;
}

interface SearchProduct {
  id: string;
  asin: string;
  title: string;
  price: number;
  currency: string;
  rating: number;
  reviews_count: number;
  image_url: string;
  product_url: string;
  is_prime: boolean;
  is_sponsored: boolean;
  is_amazons_choice: boolean;
  is_best_seller: boolean;
  shipping_info: string;
  position: number;
}

// Function to open Amazon link
const openAmazonLink = async (url: string) => {
  // Check if the URL can be opened
  const canOpen = await Linking.canOpenURL(url);
  if (canOpen) {
    await Linking.openURL(url);
  } else {
    // Handle case where URL can't be opened
    Alert.alert('Cannot open URL', 'The Amazon app may not be installed.');
  }
};

export default function Index() {
  const [productInfo, setProductInfo] = useState<ProductInfo | null>(null);
  const [loading, setLoading] = useState(false);
  const { addProduct } = useProductContext();
  const [isMounted, setIsMounted] = useState(true); // To track if the component is mounted
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState<SearchProduct[]>([]);
  const [totalResults, setTotalResults] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [trackingProduct, setTrackingProduct] = useState<string | null>(null); // Track which product is being added

  useEffect(() => {
    setIsMounted(true); // Mark the component as mounted when it mounts

    return () => {
      setIsMounted(false); // Mark the component as unmounted when it unmounts
    };
  }, []); // This useEffect runs only once when the component mounts

  const fetchProductInfo = async () => {
    setLoading(true);
    try {
      const response = await axios.get('http://192.168.1.29:5000/fetch_product_info'); // Replace with your local IP address
      console.log('Response data:', response.data); // Log the response data

      // Generate a unique id for the product
      const product = { 
        ...response.data, 
        id: uuid.v4(), // Generate unique id for each product
      };

      if (isMounted) {
        setProductInfo(product);
        // Store the fetched product information in AsyncStorage
        await AsyncStorage.setItem('products', JSON.stringify([product]));
        addProduct(product);
      }
    } catch (error) {
      console.error('Error fetching product info:', error);
    } finally {
      if (isMounted) {
        setLoading(false);
      }
    }
  };

  // Function to track a product (add it to the product list)
  const trackProduct = async (product: SearchProduct) => {
    try {
      setTrackingProduct(product.id);
      
      // Convert the search product to the format expected by ProductInfo
      const productToAdd: ProductInfo = {
        id: product.id,
        title: product.title,
        brand: 'From Amazon Search', // Default value since search results don't have brand
        price: product.price,
        stock: product.is_prime ? 'In Stock' : 'Check Amazon',
        images: [product.image_url],
        url: product.product_url
      };
      
      // Add the product to the context
      addProduct(productToAdd);
      
      // Also save to AsyncStorage
      try {
        // Get existing products
        const storedProductsJson = await AsyncStorage.getItem('products');
        const storedProducts = storedProductsJson ? JSON.parse(storedProductsJson) : [];
        
        // Add new product
        const updatedProducts = [...storedProducts, productToAdd];
        
        // Save back to AsyncStorage
        await AsyncStorage.setItem('products', JSON.stringify(updatedProducts));
        
        Alert.alert('Success', `Added "${product.title.substring(0, 30)}..." to your tracked products`);
      } catch (error) {
        console.error('Error saving to AsyncStorage:', error);
        Alert.alert('Error', 'Failed to save product to storage');
      }
    } catch (error) {
      console.error('Error tracking product:', error);
      Alert.alert('Error', 'Failed to track product');
    } finally {
      setTrackingProduct(null);
    }
  };

  const searchProducts = async () => {
    if (!searchQuery.trim()) {
      Alert.alert('Search Error', 'Please enter a product to search for');
      return;
    }

    setLoading(true);
    setSearchResults([]);
    
    try {
      console.log(`Sending search request for: ${searchQuery}`);
      const response = await axios.get(`http://192.168.1.29:5001/search_products?query=${encodeURIComponent(searchQuery)}`);
      console.log('Search response status:', response.status);
      console.log('Search results:', response.data);

      if (response.data && response.data.products) {
        console.log(`Found ${response.data.products.length} products`);
        // Add unique IDs to each product
        const productsWithIds = response.data.products.map((product: any) => ({
          ...product,
          id: uuid.v4()
        }));

        if (isMounted) {
          setSearchResults(productsWithIds);
          setTotalResults(response.data.total_results || productsWithIds.length);
          setCurrentPage(response.data.page || 1);
        }
      } else {
        console.warn('Unexpected response format:', response.data);
        Alert.alert('Search Error', 'Unexpected response format from server');
      }
    } catch (error: any) {
      console.error('Error searching products:', error);
      
      // Get more detailed error information
      let errorMessage = 'Failed to search for products. Please try again.';
      if (error.response) {
        // The request was made and the server responded with a status code
        // that falls out of the range of 2xx
        console.error('Error response data:', error.response.data);
        console.error('Error response status:', error.response.status);
        errorMessage = error.response.data?.error || errorMessage;
      } else if (error.request) {
        // The request was made but no response was received
        console.error('Error request:', error.request);
        errorMessage = 'No response received from server';
      } else {
        // Something happened in setting up the request that triggered an Error
        console.error('Error message:', error.message);
        errorMessage = error.message || errorMessage;
      }
      
      Alert.alert('Search Error', errorMessage);
    } finally {
      if (isMounted) {
        setLoading(false);
      }
    }
  };

  return (
    <View style={styles.container}>
      <View style={styles.searchContainer}>
        <TextInput
          style={styles.searchInput}
          placeholder="Enter product to search"
            <View style={styles.productContainer}>
              {/* Image at the top */}
              <View style={styles.imageContainer}>
                <Image 
                  source={{ uri: item.image_url }} 
                  style={styles.productImage} 
                  resizeMode="contain"
                />
              </View>
              
              {/* Product details below the image */}
              <View style={styles.productDetails}>
                <View style={styles.titleContainer}>
                  {item.is_sponsored && (
                    <Text style={styles.sponsored}>Sponsored</Text>
                  )}
                  
                  <Text style={styles.productTitle} numberOfLines={2}>
                    {item.title}
                  </Text>
                  
                  <View style={styles.badgeContainer}>
                    {item.is_amazons_choice && (
                      <View style={styles.amazonChoiceBadge}>
                        <Text style={styles.badgeText}>Amazon's Choice</Text>
                      </View>
                    )}
                    
                    {item.is_best_seller && (
                      <View style={styles.bestSellerBadge}>
                        <Text style={styles.badgeText}>Best Seller</Text>
                      </View>
                    )}
                  </View>
                </View>
                
                <View style={styles.ratingContainer}>
                  <Text style={styles.rating}>{item.rating} â˜…</Text>
                  <Text style={styles.reviewCount}>({item.reviews_count})</Text>
                </View>
                
                <Text style={styles.price}>
                  {item.currency} {item.price}
                </Text>
                
                <Text style={styles.shipping}>{item.shipping_info}</Text>
                
                <View style={styles.buttonGroup}>
                  <TouchableOpacity 
                    style={styles.viewButton} 
                    onPress={() => openAmazonLink(item.product_url)}
                  >
                    <Text style={styles.viewButtonText}>View on Amazon</Text>
                  </TouchableOpacity>
                  
                  <TouchableOpacity 
                    style={styles.trackButton} 
                    onPress={() => trackProduct(item)}
                    disabled={trackingProduct === item.id}
                  >
                    <Text style={styles.trackButtonText}>
                      {trackingProduct === item.id ? 'Adding...' : 'Track Product'}
                    </Text>
                  </TouchableOpacity>
                </View>
              </View>
            </View>
          </View>
        )}
        ListHeaderComponent={
          <View style={styles.resultsHeader}>
            <Text style={styles.resultsText}>Found {totalResults} results for "{searchQuery}"</Text>
          </View>
        }
      />
    ) : productInfo ? (
      <View style={styles.productContainer}>
        {productInfo.images && productInfo.images.length > 0 && (
          <Image
            source={{ uri: productInfo.images[0] }}
            style={styles.productImage}
            resizeMode="contain" // Ensure the whole image is visible
          />
        )}
        <Text style={styles.title}>{productInfo.title}</Text>
        <Text>Brand: {productInfo.brand}</Text>
        <Text>Price: ${productInfo.price}</Text>
        <Text>Stock: {productInfo.stock}</Text>
        <TouchableOpacity onPress={() => openAmazonLink(productInfo.url)}>
          <Text style={styles.link}>View on Amazon</Text>
        </TouchableOpacity>
      </View>
    ) : (
      !loading && <Text>No product information available</Text>
    )}
  </View>
);

// ... (rest of the code remains the same)

const styles = StyleSheet.create({
  // ... (rest of the styles remain the same)
  productContainer: {
    flexDirection: 'column',
    padding: 15,
    backgroundColor: 'white',
    borderRadius: 8,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
    alignItems: 'center', // Center children horizontally
  },
  imageContainer: {
    width: 160,
    height: 160,
    marginBottom: 15,
    justifyContent: 'center',
    alignItems: 'center',
  },
  productImage: {
    width: '100%',
    height: '100%',
  },
  productDetails: {
    width: '100%',
    alignItems: 'center', // Center all content
  },
  bestSeller: {
    backgroundColor: '#FF9900',
    color: 'white',
    paddingHorizontal: 6,
    paddingVertical: 2,
    borderRadius: 4,
    fontSize: 12,
  },
  productContent: {
    flexDirection: 'row',
  },
  productImage: {
    width: 100,
    height: 100,
    marginRight: 12,
    resizeMode: 'contain',
  },
  productDetails: {
    flex: 1,
  },
  title: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 6,
    lineHeight: 22,
  },
  ratingContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 6,
  },
  rating: {
    color: '#FF9900',
    fontWeight: 'bold',
    marginRight: 4,
  },
  reviews: {
    fontSize: 12,
    color: '#666',
  },
  price: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#B12704',
    marginBottom: 6,
  },
  prime: {
    color: '#00A8E1',
    fontWeight: 'bold',
    marginBottom: 4,
  },
  shipping: {
    fontSize: 12,
    color: '#565959',
    marginBottom: 8,
  },
  buttonGroup: {
    flexDirection: 'row',
    justifyContent: 'center',
    marginTop: 10,
    marginBottom: 5,
    width: '100%',
  },
  viewButton: {
    backgroundColor: '#FFD814',
    borderRadius: 8,
    paddingVertical: 10,
    paddingHorizontal: 15,
    alignItems: 'center',
    justifyContent: 'center',
    width: '45%',  // Fixed width instead of flex
    marginRight: 8,
    height: 40,    // Fixed height for consistent button size
  },
  viewButtonText: {
    color: '#111',
    fontWeight: '600',
    fontSize: 14,
  },
  trackButton: {
    backgroundColor: '#007185',
    borderRadius: 8,
    paddingVertical: 10,
    paddingHorizontal: 15,
    alignItems: 'center',
    justifyContent: 'center',
    width: '45%',  // Fixed width instead of flex
    height: 40,    // Fixed height for consistent button size
  },
  trackButtonText: {
    color: 'white',
    fontWeight: '600',
    fontSize: 14,
  },
  link: {
    color: '#007185',
    textDecorationLine: 'underline',
    marginTop: 10,
    fontSize: 16,
  },
});
